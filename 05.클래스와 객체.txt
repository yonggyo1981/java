객체와 객체 지향 프로그래밍
- 객체를 기반으로 하는 프로그래밍

참고)
절자지향 프로그래밍
 -> 순서대로 일어나는 시간순으로 프래그래밍
 
객체지향 프로그래밍
-> 객체를 정의하고 객체간의 협력을 프로그래밍 하는 것 
(속성 + 메서드)

클래스 - blueprint - 청사진, 설계도
- 객체의 속성과 기능을 코드로 구현한 것
- 클래스를 정의

- 속성 - 멤버 변수
- 기능 - 메서드 


(접근 제어자) class 클래스 이름 {
	멤버 변수;
	메서드;
}


public  - 외부클래스에서 접근 가능
default  - 동일 패키지 내에서만 접근 가능 (default 키워드는 생략이 가능) 
protected - 외부 클래스에서 접근 불가능, 내부에서만 접근이 가능, 상속을 통해서만 내부에서 접근이 가능
private - 내부에서만 접근이 가능한 


129 - 1분 복습 

public class Person {
	String name;
	int age;
	char gender;
}


클래스 이름 짓는 규칙 
	- 대문자로 시작(파스칼 케이스)


클래스 속성을 구현하는 멤버 변수
	public class Student {
		int studentID;
	}
	
	char 
	String 문자열
	
	변수의 자료형 
		1) 기본 자료형
			(int, float, double, long, short, byte .. boolean)
			
		2) 참조 자료형
			(String, Date, ArrayList .... , Person)
			
클래스의 기능을 구현하는 메서드(함수)

패키지
 - 클래스 파일의 묶음
 - 디렉토리 구조
	- 계층 구조로 구성
	
패키지 선언 
-> 소스 가장 상단
package 
클래스 이름이 같아도 패키지 명이 다르면 다른 클래스!!

chapter4.Student 
chapter5.Student 



메서드
 - 함수의 한 종류

함수란 
	1. 하나의 기능을 수행하는 일련의 코드
	2. 어떤 기능을 수행하도록 미리 구현해 놓고 필요할 때마다 호출 하여 사용할 수 있다.
	
함수의 입력과 반환 

	int sum(int x) {
		int result = x * 2 + 2;
		return result;
		// 코드 ..... 
	}

반환값의 자료형 명시 반드시.

만약 반환값이 없으면... void 
	void printMessage(....) {
	
	}

반환이 되면 -> 함수 수행을 끝내고 호출한 곳으로 다시 되될아간다.


P137 
호출 -> 함수의 실행
(인수, 인수);


함수 호출과 스택 메모리

JVM -> main 메서드 호출  -> divide 메서드 호출 

함수가 호출 -> 스택 메모리 영역에 올라간다 -> 함수 실행 종료 -> 스택 메모리에서 제거
					( 함수 내에 정의 되어 있는 소스가 존재 - 변수 ..)
					
함수의 장점 
1. 기능을 나누어 코드를 효율적으로 구현할 수 있다.
2. 중복되는 코드를 막을 수 있다.
3. 디버깅 작업을 할때 편리

메서드 
	-함수에 객체 지향 개념이 포함된 용어
	(객체 지향과 관련된 기타 속성, 기능 +)

자바의 이름 짓기 규약 
카멜 케이스 - 메서드명, 변수정
(단어 마다 첫 시작 단어는 대문자 - 다만 가장 처음 단어는 소문자)

파스칼 케이스  - 클래스명
(단어의 컷 시작 단어는 대문자)

패키지명 - 소문자로 만든다


클래스와 인스턴스
클래스 사용과 main() 함수
- main() - 프로그램을 시작하는 함수(JVM에서 프로그램을 실행하기위해서 호출)

main() 함수에서 클래스를 사용하는 방법
1) 클래스 내부에 main() 함수를 만드는 방법 
2) 외부에 테스트용 클래스를 만든드는 방법


import -> 다른 패키지의 클래스를 불러올때 

자바의 클래스는 동일 패키지 안에서 공유
-> 다른 패키지에서 공유하려면 import로 패키지명 또는 패키지명.클래스명
-> public 클래스만 공유 가능


클래스 정의 -> 생성 (new 예약어)

인스턴스 여러개 생성하기


149. 참조변수 사용하기
멤버 변수, 메서드 -> 도트(.)연산자

인스턴스와 힙메모리

Person person = new Person();

person 참조 변수에 new Person의 힙 메모리 주소를 대입

한걸음더 - 힙메모리 - 객체가 생성될때 사용되는 공간 
(클래스에 정의된 멤버변수 -> 힙에 생성이 되어야(즉, 인스턴스화 되어야) 존재, 접근 가능 -> 인스턴스 변수)


용어 P151
객체  == 인스턴스 
클래스 
멤버 변수 - 클래스의 속성, 특성 -  인스턴스 변수
메서드 - 멤버 변수를 이용하여 클래스의 기능을 구현(함수 + 객체 지향 개념 - 함수와 동일하게 동작)
참조 변수 
참조 값 - 인스턴스의 생성된 주소(힙 영역에 주소)


Person person = new Person()

기본 자료형 (int, float .... )
참조 자료형 (클래스 - JDK, 사용자 정의)



생성자
- 클래스에서 인스턴스를 생성할 때 사용하는 함수 
- 함수명이 클래스명과 동일
- 반환값이 없다
- 멤버변수(인스턴스 변수) 초기화
- 생성자 없을때 컴파일할때 자동으로 추가해 주는 생성자 -> 디폴트 생성자
- 정의되어 있는 생성자가 하나도 없을때만 디폴트 생성자가 추가

   
- 생성자 함수 호출 -> 인스턴를 생성 -> 가장 먼저 호출되는 함수 -> 주로 초기화

초기화 -> 생성자 함수를 여러개 만들수(다른 매개변수를 지정하도록)

생성자 함수의 매개변수를 서로 다르게 여러개 생성하는 것 -> 생성자 오버로드

만약 메서드에 적용하면 -> 메서드 오버로드(매개 변수가 다르게 여러개 지정)

P157 - 나혼자 코딩 - 154 Person  name, height, weight  -> 생성자를 통해 초기화 

참조자료형 


자료형 
1. 기본 자료형 (int, float, short, byte ...)
2. 참조 자료형 (클래스 형의 자료형 -> 인스턴의 주소를 참조하는 자료형, JDK 기본 제공 클래스, 사용자 정의클래스)

-> 클래스 안에서 변수 처럼 정의할 수 있는 자료형


정보은닉 
- 접근 제어자
public  - 외부 클래스에서 접근 가능(import 해서 자유롭게 접근)
protected - 동일 패키지 안에서는 (내부, 외부 접근 - default와 동일) + (다른 패키지에 있는 클래스)상속을 받은 클래스에서는 내부에서 만 접근이 가능(상속 받은 클래스 안에서는 private 과 동일)

default(생략)  - 동일 패키지 안에서 접근 가능 (import 해도 접근 불가)
 - package 
private  - 내부 클래스 안에서만 접근이 가능(상속 받아도 접근 X)

setter / getter
멤버변수 명과 동일한 set, get 

168
Q1. 생성자 - 함수(클래스명과 동일한 함수) -> 반환 X,  가장 먼저 호출 되는 함수
			 - 클래스 내부에 있는 멤벼 변수를 초기화
			 
			 클래스에 생성자 정의되지 않은 경우 -> 컴파일 시 -> 자동으로 Default 생성자가 추가
			 -> 생성자가 없으면 인스턴스 생성이 불가
			 -> 생성자를 프로그래머가 정의 -> Default 생성자는 추가 X
			 -> 생성자는 매개변수를 다르게 해서 여러개 정의
			     - 생성자 오버로드
				 
Q2. 인스턴스 - 클래스를 생성하여  메모리(힙)에 있는 상태
     멤버변수를 -> 인스턴스 변수

Q3 메서드

143~168
 정독 -> 예제 
 