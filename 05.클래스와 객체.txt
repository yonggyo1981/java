객체와 객체 지향 프로그래밍
- 객체를 기반으로 하는 프로그래밍

참고)
절자지향 프로그래밍
 -> 순서대로 일어나는 시간순으로 프래그래밍
 
객체지향 프로그래밍
-> 객체를 정의하고 객체간의 협력을 프로그래밍 하는 것 
(속성 + 메서드)

클래스 - blueprint - 청사진, 설계도
- 객체의 속성과 기능을 코드로 구현한 것
- 클래스를 정의

- 속성 - 멤버 변수
- 기능 - 메서드 


(접근 제어자) class 클래스 이름 {
	멤버 변수;
	메서드;
}


public  - 외부클래스에서 접근 가능
default  - 동일 패키지 내에서만 접근 가능 (default 키워드는 생략이 가능) 
protected - 외부 클래스에서 접근 불가능, 내부에서만 접근이 가능, 상속을 통해서만 내부에서 접근이 가능
private - 내부에서만 접근이 가능한 


129 - 1분 복습 

public class Person {
	String name;
	int age;
	char gender;
}


클래스 이름 짓는 규칙 
	- 대문자로 시작(파스칼 케이스)


클래스 속성을 구현하는 멤버 변수
	public class Student {
		int studentID;
	}
	
	char 
	String 문자열
	
	변수의 자료형 
		1) 기본 자료형
			(int, float, double, long, short, byte .. boolean)
			
		2) 참조 자료형
			(String, Date, ArrayList .... , Person)
			
클래스의 기능을 구현하는 메서드(함수)

패키지
 - 클래스 파일의 묶음
 - 디렉토리 구조
	- 계층 구조로 구성
	
패키지 선언 
-> 소스 가장 상단
package 
클래스 이름이 같아도 패키지 명이 다르면 다른 클래스!!

chapter4.Student 
chapter5.Student 



메서드
 - 함수의 한 종류

함수란 
	1. 하나의 기능을 수행하는 일련의 코드
	2. 어떤 기능을 수행하도록 미리 구현해 놓고 필요할 때마다 호출 하여 사용할 수 있다.
	
함수의 입력과 반환 

	int sum(int x) {
		int result = x * 2 + 2;
		return result;
		// 코드 ..... 
	}

반환값의 자료형 명시 반드시.

만약 반환값이 없으면... void 
	void printMessage(....) {
	
	}

반환이 되면 -> 함수 수행을 끝내고 호출한 곳으로 다시 되될아간다.


P137 
호출 -> 함수의 실행
(인수, 인수);


함수 호출과 스택 메모리

JVM -> main 메서드 호출  -> divide 메서드 호출 

함수가 호출 -> 스택 메모리 영역에 올라간다 -> 함수 실행 종료 -> 스택 메모리에서 제거
					( 함수 내에 정의 되어 있는 소스가 존재 - 변수 ..)
					
함수의 장점 
1. 기능을 나누어 코드를 효율적으로 구현할 수 있다.
2. 중복되는 코드를 막을 수 있다.
3. 디버깅 작업을 할때 편리

메서드 
	-함수에 객체 지향 개념이 포함된 용어
	(객체 지향과 관련된 기타 속성, 기능 +)

자바의 이름 짓기 규약 
카멜 케이스 - 메서드명, 변수정
(단어 마다 첫 시작 단어는 대문자 - 다만 가장 처음 단어는 소문자)

파스칼 케이스  - 클래스명
(단어의 컷 시작 단어는 대문자)

패키지명 - 소문자로 만든다





