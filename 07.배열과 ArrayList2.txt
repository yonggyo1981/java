1. 배열이란?
	같은 자료형을 연속적으로 나열한 자료 구조
	int[] nums = new int[4]; // int 자료형을 4개를 연속적으로 나열
	
	배열 선언 
	자료형[] 변수명 = new 자료형[배열 갯수] // 자료형 갯수만큼 빈 공간 
	자료형 변수명[] = new 자료형[배열 갯수]
	예) int[] nums = new int[4];
		byte[] bytes = new byte[5]; // 1바이트 X 5개의 빈 공간  
		
		[] -> 인덱스 연산자 -> 특정위치의 배열의 공간에 접근
		
		
		배열 - length 속성 -> 배열의 공간의 갯수
				(요소의 갯수 X, 공간의 갯수)
		
		배열은 인덱스 순서대로 순서가 있으므로 주로 for문으로 써서 
		데이터를 순회 조회, 수정
		
		배열을 선언, 빈공간, 초기값이 들어간다
		기본자료형 -> 정수 - 0으로 초기화, 실수 - 0.0으로 초기화
					    -> 논리값 - false로 초기화
		참조자료형 -> 초기값 null
		
		초기화 -> 선언한 변수에 처음에 값을 대입하는 것 
		
		1) 자료형[] 변수명 = new 자료형[] { 값1, 값2, 값3 };
		2) 자료형[] 변수명 = { 값1, 값2, 값3 };
		
		배열 자료형을 먼저 선언한 경우는 반드시 1)방식으로 초기화 
		자료형[] 변수명;
		변수명 = new 자료형[] { 값1, 값2, 값3 };
		
		물리적 위치 == 논리적 위치와 동일 
		인덱스 번호는 0부터 시작
		
		ArrayList 
			.size() -> 요소의 갯수(공간의 갯수 X)
		
		char -> 정수(2byte 양의 정수)
		
		'A' -> 65 -> 
		기본자료형 -> 숫자
		
		'A'(char) -> (int)'A' + 1(int)
		65 + 1
		
		String 문자열
		String text = "ABC";
		private final char[] 
		
		
		참조 자료형의 배열
		
		211 - 나혼자 코딩
		클래스명 Student 
					- studentID, name 
					- showStudentInfo() 
					  - studentID, name  출력
					  
		Student 3명의 배열을 만들고  -> 생성 -> for
		
		배열 복사하기
			기본 배열 자료형 복사
			1) 기존 배열과 동일한 자료형 + 크기를 가진 배열선언 
			   반복해서 대입하는 방법
			   
			2) System.arraycopy
								src - 원 배열     
								srcPos - 원배열의 복사 시작지점 
								dest - 복사가될 대상
								destPos - 복사 시작 위치
								length - 복사 할 요소의 갯수(srcPos 부터 시작)
								   
		객체 배열(참조자료형 배열)
			1) 얕은 복사
				- System.arraycopy 또는 각 배열의 값을 대입 
			   -> 인스턴의 주소만 복사 
			   -> 원 배열이 가지고 있는 동일한 인스턴스를 가리키고 있다
			   -> 원 배열을 바꾸면 복사된 배열도 변경된 값으로 보인다..
			
			2) 깊은 복사 - 인스턴스 자체가 새로 생성 및 값이 설정
			
			   
		향상된 for 
			배열의 요소를 하나씩 꺼내서 순회(초기화 X, 조건식 X, 증감식 X)
			for(요소 : 배열) {
			
			}
		218 - 1분 복습   
		for (int number : numArray) {
		
		}
		
2. 다차원 배열
	차원이 증가 할 수록 []가 차원수 만큼 추가
	int[][] = new int[행][열]
	int[][]= new int[2][3]; // 2행 3열 -> 평면적 좌표
	행,열 만큼 int 자료형의 빈 공간 -> 초기값 0 
	
	초기화
	int[][] nums = new int[][] { {1,2,3}, {4,5,6} };
	int[][] nums = { {1,2,3}, {4,5,6} };
	
	P221 - 나혼자 코딩
	
3. ArrayList와 클래스 사용하기
	기존배열의 단점
		공간의 범위를 먼저 선언
		-> 범위를 벗어나는 데이터를 추가
		-> 늘어난 공간을 반영한 새로운 배열을 생성하고 기존 배열의
			데이터를 복사한 후에 추가 
		-> 중간에 껴 있는 데이터를 삭제
		-> 줄어든 새로운 배열 공간 생성 
			 기존배열의 앞 부분을 잘라서 복사, 뒷부분을 잘라서 복사
		
		-> 추가, 삭제 등이 불편하다.
		
		내부적으로 배열 공간을 10개 생성 
		10개를 넘어가는 시점 -> +10개를 추가한 새로운 공간
		
		주로 객체배열 추가, 삭제
		
		메서드
			boolean add(E e)  -> E 유동적인 자료형 
				요소의 추가
			int size() -> 추가된 요소의 갯수(공간의 갯수 X)
			E get(int index) -> index 위치에 있는 요소 값을 반환
			E remove(int index) -> index 위치에 있는 요소 제거, 제거된 요소를 반환
			boolean isEmpty() -> 배열이 비어 있는 체크
				
			참고)
			(자바 7버전 Generic X -> Object -> 원래 자료형으로 형변환)
			(자바 8버전 Generic -> 유동적인 자료형 -> 실행 될때)
		
		
		ArrayList 클래스 
			java.util 패키지 -> 외부 패키지 -> import 
		
		ArrayList<E> 배열 이름 = new ArrayList<E>();
		ArrayList<E> 배열 이름 = new ArrayList<>();
		
		별도로 저장 공간 X -> 유동적으로 알아서 늘어나고 줄어든다.
		
		P225 - 나혼자 코딩
		Student 클래스 -> ArrayList -> 3개 -> 출력
		
4. 배열 응용프로그램 
	학생 성적 출력 프로그램 - ArrayList 
	클래스 
		Student 
			+ 과목 목록
			
		Subject 
P230 Q1 - 같은 자료형 

P199~230
정독 -> 예제

