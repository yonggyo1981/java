기본연산자
항 - 연산에 사용되는 값
단항, 이항(num1 + num2), 삼항 (삼항 조건 연산자) (조건식)?참일때:거짓일때
(++num)

1) 대입연산자
( = ) 
int num = 10; 대입(복사, 저장, 연산의 최종 결과를 대입)
- 가장 나중에 연산이 된다(연산자의 우선순위가 가장 낮다)

int result = 10 + 20 * 10 - 20;

2) 부호연산자 
	(+, -)
	- -> 부호가 변경(음수 -> 양수, 양수 -> 음수)
	
3) 산술연산자
(+,-, /, *, %)
% - 나눈 나머지
홀수 짝수 -> 숫자 % 2 -- 나머지가 1이면 -> 홀수, 아니면 짝수


산술 연산의 우선순위(수학의 연산 우선순위와 동일)
+ - / * %

10 + 20 * 3; 

totalScore / 2.0 -> double 


3) 증감연산자
단항 연산자 <-- 이항연산자 보다 우선순위가 높다.
++num 
num++

--num;
num--;

int num = 1;
int num2 = ++num;  -> num + 1 -> num2 = num
int num2 = num++;  -> num2 = num  --> num+1

4) 관계 연산자(비교 연산자)
>, >=, <, <= == !=  

반환값 논리값(true, false)
조건문, 반복문에서 많이 쓰인다


5) 논리연산자
OR - 논리합 - || 
AND - 논리곱 - && 
NOT - 부정 - !

우선순위 
논리연산자 < 관계(비교) 연산자

우선순위가 관계연산자 보다 낮으므로 관계연산자를 여러개 연결해서 사용하는데 
주로 사용된다.
num > 10 && num <100

부정 
true -> false
false -> true 

참조) 자바스크립트에서 논리연산자의 반환값 
  (논리값 X -> 조건에 해당되는 값)
  const num = num || 10; // 기본값
  
  
  자바 -> 논리값(true, false)
  
동일한점 
boolean result = true 조건 || false 조건;
boolean result = false 조건 ||  true, false 조건;

boolean result = true 조건 && false 조건;
boolean result = false 조건 && true, false 조건;

단락 회로 평가
P78

6) 복합 대입연산자
(대입, 산술 복합적으로 연결되어)
+=
-= 

int num = num + 1; // num+=1;  // ++num;
int num = num * 2; // num *= 2;


num1 = num1 + 5; // num1 += 5;
num1 = num1 * num2; // num1 *= num2;

7) 조건연산자(삼항연산자, 삼항조건연산자)
(조건식)?참일때 : 거짓일때;


P82
isEven = (num % 2 == 0)?true:false;

우선순위
가장 높은 우선순위 ()
관계(비교) 연산자
논리 연산자   num > 10 && num < 100
가장 낮은 우선순위 =


비트연산자
- 비트단위로 연산이 이뤄지는 연산자
- 2진수 연산 

&(AND) - 두개의 비트값이 모두 1인 경우에만 연산의 결과가 1이 되는 연산
int num1 = 5;
int num2 = 10;

| (OR)  - 비트값이 하나라도 1이면 1
        0  1  0  1
		1	0  1  0
	---------------
		 1 1 1  1

^(XOR) 연산자
같은 값이면  0, 다른값이면 1 
		 0  1  0  1
		1	0  1  0
		--------------
		 1  1  1  1 
		 
~ 연산자(반전)  1은 0, 0은 1로 변경
0 0 0 0 1	0 1  0
1 1 1 1 0 1 0 1

1byte - 8bit - 1번째 비트 -> 부호(0 - 양수, 1- 음수)


비트 이동 연산자(시프트 연산자)
<<  
num << 2;
		0 0 0 0 0 1	0 1 
		0 0 0 10 1 0 0 
		4 + 16 = 20 
		5 * 2^2 = 5 * 4 = 20
		
		5 * 4= 20;

num << 4
		0 0 0 0 0 1	0 1 
		0 1 0 1 0 0  0 0 
		5 * 2^4
>>       
		
num >> 2
	0 0 0 0 0 1	0 1 
	0 0 0 0 0 0 0 1
	 
>> 2
	1 0 0 0 0 1	0 1 
	1 1 0 0 0 0 0 1
	
>>> 2
	1 0 0 0 0 1	0 1 
	 0 1 0 0 0 0 0 1
	 ()
	 =