1. 객체 지향 프로그래밍과 클래스
- 객체를 기반으로 하는 프로그램(OOP)
- 객체?
	(Object - 사물, 대상)
	- 사물과 대상간 상호작용
	
	클래스 정의 -> 객체의 틀 정의
		-> 객체의 속성과 기능 정의
		-> 특성, 함수 
		-> 멤버변수, 메서드
	
		-> 문법적인 부분
		
		(접근제어자) class 클래스 이름 {
			멤버변수
			
			메서드...
		}
		
		접근제어가
		public  - 외부 클래스에서 접근 가능, 다른 패키지의 클래스에서도 import를 통해 접근 가능
		protected - 동일 패키지에서는 외부 내부 접근 가능, 외부 패키지 -> 상속 -> private으로 접근 가능(내부에서만 접근이 가능)
		default(생략) - 동일 패키지 안에서만 내부, 외부 접근 가능 
		private - 내부 클래스에서만 접근 가능, 외부 X
		
		private < default < protected < public 
		
		클래스 앞의 접근제어자 
		
		클래스 파일명과 동일한 클래스명 -> public 을 붙인다.
		(외부 패키지에서 접근 가능하기 위해)
		
		클래스 이름 짓는 규칙
		-> 앞글자 -> 대문자, 단어가 여러개 일때 는 시작 단어의 첫글자를 대문자
		(파스칼케이스)
		OrderProcess
		
		메서드명, 멤버변수
		-> 단어의 시작 첫 단어를 대문자, 가장 첫번째 단어는 소문자
		(카멜케이스)
		orderProcess
		
		+ 상수 -> 대문자, 단어 단어 사이
		NUM, ORDER_PRICE
		
2. 클래스 살펴보기
	1) 멤버 변수 - 클래스 속성을 구현
		(속성, 특성)
		
		[접근 제어자] 자료형 변수명
		
		- 기본자료형
		byte(1), short(2), int(4), char(2), boolean(1), long(8), float(4), double(8) -> 공간의 용량이 정해져 있는 자료형
     		
		- 참조자료형
		- 참조를 할수 있는 인스턴스 주소를 담고 있는 자료형
		  (클래스명 형태의 자료형)
		  
		  사용자가 정의한 클래스, JDK에서 제공하는 기본 클래스 
		  String, Integer, ArrayList, Date ... 
		  Person person
		  Subject subject 
		
	2) 메소드 - 클래스의 기능(함수)
		[접근제어자 - public|protected|default|private] 반환자료형 메서드명 (매개변수) {
			
			return 반환값;
		}
		
		반환 자료형 - 기본자료형, 참조 자료형
		
	3) 패키지 
		- 클래스 파일의 묶음  
		- 프로젝트 하위에 물리적으로 디렉토리가 생성 
		- 동일 패키지 안에서는 클래스, 인터페이스 .. 공유가 가능
		- 다른패키지 일때는 별도의 방법(import로)로 불러와야 접근 가능 

3. 메서드
	함수?
		- 하나의 기능을 수행하는 일련의 코드
	    - 어떤 기능을 수행하도록 미리 구현해 놓고 필요할 때마다 호출할 수 있다.
		
		입력 -> 처리 부분 -> 출력 
	
		[접근제어자][예약어 static|final] int add (int num1, int num2) {
			int result;
			result = num1 + num2;
			
			return result;
		}
		
		반환값 자료형 - 기본자료형 + 참조 자료형
		반환값이 없는 경우 -> void(반환값이 없는 함수)
		void printOrder() {
			System.out.println("....");
		}
		
		참고) 반환값이 없는 메서드 -> 생성자
		
		
		return 예약어
			-> 함수 수행을 끝내고 프로그램의 흐름 중에서 호출한 곳으로 다시 되돌아 갈때 사용할 수 있다.
			
			- 함수의 수행을 종료하는 목적
		    - 호출
			
			
			int num1 = 10;
			int num2 = 20;
			
			
			int add (int num1, int num2) {
				return num1 + num2;
			}
			
			함수 호출과 스택 메모리
			스택메모리 - 함수만을 위한 메모리 공간
			
			함수 장점 
			1)  기능을 나누어 코드를 효율적으로 구현할 수 있다
				(add(), subtract(), divide()....)
			2) 중복된 코드를 막을 수 있다.
			
			3) 디버깅 작업을 할때도 편리
			
			메서드 
				함수에 객체 지향 개념이 포함된 용어
			
			함수명(변수명)
				- 카멜 케이스
				단어의 시작은 대문자, (첫 단어는 제외)
				orderProcess
			
			P143 -> main() 
			-> JVM이 먼저 실행하는 함수
			P146- StudentTest.java
			
4. 클래스와 인스턴스
	new 예약어- 클래스를 생성한다
				   - 인스턴스를 생성한다
				   생성자 호출 -> 인스턴스
				   (메서드)
				   
	인스턴스와 참조 변수 
	참조변수 -> 인스턴스 접근 -> 마침표(.) 연산자
	
5. 생성자
	함수(메서드) -> 클래스명과 동일한 메서드
	
	1) 인스턴스 생성
	2) 멤버변수의 초기화
	
	3) 반환값 X
	
	생성자 함수가 없으면 인스턴스 생성 X
	-> 아무 생성자가 없으면 자동으로 컴파일러에서 기본생성자(클래스명() {})를 추가해 준다.
	-> 기본생성성자 자동 추가되는 원칙 
	    -> 미리 정의되어 있는 생성자가 아무것도 없을때 
	
	4)  생성자 오버로드
		생성자 메서드만 다르게 여러개 생성
	    (메서드 오버로드와 동일)
		
6. 참조 자료형
	P159
	자료형 
			1) 기본 자료형
				- 크기가 정해진 자료형(int, byte, long, float, double)
			2) 참조 자료형
				- 인스턴스를 참조하는 주소를 담는 자료형
				- 클래스형으로 선언된 자료형
				(사용자 정의 클래스 + JDK 기본 클래스 - String, Integer ... ArrayList )
	
	
7. 정보은닉
	P162
	접근제어자
	public - 외부 클래스 + import를 통한 외부 패키지
	protected  - 동일 패키지(내부 + 외부) - 외부패키지 -> 상속 -> 접근(private)
					(default + a(상속))
	default - 동일 패키지(내부 + 외부)
	private  - 내부 클래스에서만 접근 
	
	+ set/get -> setter, getter
	
	P166