P199 
1. 배열이란?
	동일한 자료형의 연속된 공간 나열
	int[] nums = new int[4]; -> int 자료형 공간 4개를 일렬로 나열
	
	자료형[] 변수명 = new 자료형[공간의 갯수];
	자료형 변수명[] = new 자료형[공간의 갯수];
	
	-> 공간 -> 값을 담을 빈공간
	배열은 -> 물리적순서 == 논리적 순서(0, 1, ,2 ,3)
	변수명[순서 번호] -> 배열 공간에 접근 
	
	값이 없는 경우 -> 초기 값
	정수 -> 0
	실수 -> 0.0
	참조자료형 -> null
	-> 비어 있는 공간 
	
	0,1,2,3,4 -> 인덱스 번호 -> 배열 공간을 접근
	-> for문이 가장 많이 사용 된다.
	
	배열 -> length -> 공간의 갯수(요소의 갯수 X )
	
	자료형[] 변수명 = new 자료형[] {값1, 값2, 값3 .... };
	자료형[] 변수명 = {값1, 값2, 값3}; // 사용이 제한되는 경우
	
	자료형[] 변수명;
	변수명 = { 값1, 값2, 값3 }(X)
	변수명 = new 자료형[] { 값1, 값2, 값3 };
	
	기본자료형 (공간의 크기가 정해져 있는 배열) 
				   -byte, short, char, int, long, float, double 
				   
	참조 자료형 (인스턴스의 주소를 담는 공간)
					- 클래스 자료형(인스턴스의 주소)
	
	Objects.deepCopy
	
	
2. 다차원 배열
	차수가 여러개인 배열
	int[] nums = new int[4];
	                            행 열 
	int[][] nums = new int[3][4]; // 2차원 배열 -> 평면
	int[][][] nums = new int[3][4][5]; // 3차원 배열 
	                              가로, 세로, 높이 -> 입체
								  
	
	
	int[][] nums = new int[][] { {1,2,3} , {4,5,6} };
	int[][] nums = { {1,2,3}, {4,5,6}};
	
3. ArrayList 클래스 사용하기
	배열 -> length -> 요소의 갯수 X, 공간의 갯수 O -> 요소의 갯수를 알 수 없다
	배열 -> 공간을 지정-> 값을 대입 -> 데이터의 추가, 수정, 삭제 
	
	컬렉션 프레임워크 
		- ArrayList  -> 배열의 추가, 수정, 삭제가 용이하고 
					   -> 요소의 갯수를 체크 하는 메서드를 제공 
					 - size() -> 요소의 갯수 
		
4. 배열 응용 프로그램 
 - P226 
	Student 클래스 
		-학번 
		- 학생이름 
		- 수강 과목 목록(ArrayList)...
		
	Subject 클래스 
		- 과목이름 
		- 과목 점수
	
5. 콜렉션 프레임 워크

Collection 인터페이스 
	- List 인터페이스 -> 순차 자료구조(배열 객처) -> 순서(0, 1, 2, 3, ....)
						  -> 중복 가능 
		ArrayList 
		LinkedList
		
		Vector 
		Queue
		Stack
		
	- Set 인터페이스 -> 집합 자료 구조(순서 X), 중복 X 
		HashSet -> 중복에 대한 여부 -> Object -> equals, hashCode 재정의
		TreeSet  -> HashSet + 정렬 
					-> Interface java.lang.Comparable -> compareTo -> 정렬 기준 
														-> 양수 -> 오름차순 
														-> 음수 -> 내림차순
						interface java.util.Comparator -> compare 
														-> 양수 -> 오름차순 
														-> 음수 -> 내림차순
	
Map 인터페이스	
	key - value 쌍 자료 구조
	HashMap 
	TreeMap  -> HashMap + 정렬(키 값)