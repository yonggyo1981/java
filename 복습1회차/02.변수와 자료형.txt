P44
1. 변수란?
 - 값을 저장할 공간의 이름
 - 자료형 
  자료형 변수
  int 변수명 - 변수를 선언한다
  
  자료형 
  정수형
  byte - 1byte
		- boolean - 1byte (true, false)
  short - 2byte 
			- char - 2byte(음수가 아닌 양의 정수)
  int  - 4byte
  long - 8byte
  
  bit -> 0,1구성된 자리수 1개
  1byte -> 8bit 0,1
  
	초기화
		- 선언된 변수에 최초로 값을 대입
	
	int num; // 변수 선언 
	num = 10;  // 초기화
 
	int num = 10; // 선언과 동시에 초기화
 
	변수의 명명규칙 
	1) 변수의 이름 -> 영문자(대소문자) 
	    + 숫자
		($,_를 제외하고 특수 X)
	
	2) 숫자는 처음에 나올 수 X
	3) 예약어 X 
	
	권장사항 
		1) 의미론적으로 이름을 붙이는 것이 좋다
		    numberOfStudent
		2) 카멜 케이스(Camel case)
			numberOfStudent
			+ 메서드명도 카멜 케이스가 권장사항
 
2. 변수가 저장되는 공간의 특성, 자료형
	메모리 - 변수에 선언된 자료형 만큼 공간이 메모리에 할당
	
	기본 자료형 - 공간이 선언하는 자료 종류에 따라 지정되는 자료형
		정수 (int)
		byte - 1  + boolean 
		short  - 2 + char 
		int  - 4
		long - 8
		
		실수 (double)
			float  - 4byte
			double - 8byte
		
	참조 자료형
		참조? -> 다른 위치(메모리 위치)에 있는 어떤 요소를 주소로 접근 한다
		
		클래스로 선언된 자료형
		
		String a = "abc";
		
	
	
3. 상수와 리터럴 
	상수 - 변하지 않는 수 
	final 변수명 -> 상수
	
	숫자, 문자(char), 논리값
	(상수 풀)

	int num = 100;
	
	final 변수명  -> 상수
	final class 클래스명 -> 하위클래스가 상속이 안되게 제한
	final 메서드 ->메서드 재정의 불가
	
	권장사항
	상수로 정의 되어 있는 변수명 -> 대문자 
	단어와 단어 -> _로 구분
	
	상수는 변하지 않는 값, 여러개 만들 필요 X 
	-> 데이터 영역 상수 영역 
	
4. 형변환
	자료형이 다를 때 자료형을 같게 만들어 주는것 
	1) 묵시적 형변환
		(자동 형변환)
		1. 크기가 작은 자료형 -> 크기가 큰 자료형 
		2. 덜 정밀한 자료형 -> 더 정밀한 자료형
		(정수 보다는 실수가 더 정밀)
		int, long -> float, double
		1, 2 -> 자료 손실이 발생하지 않기 때문에 
		
		3. 연산 중 자동 변환 (원칙은 1,2를 따름)
		4. 하위클래스 자료형 -> 상위 클래스 자료형(다형성)
		jspWriter -> Writer 
		
		PrintWrter
		
	2) 명시적 형변환(P66)
		(수동 형변환)
		1. 큰 자료형 -> 작은 자료형
		2. 더 정밀한 자료형 -> 덜 정밀한 자료형
		(실수 -> 정수)
		(자료형)변수
		3. 다형성... 원래 클래스 자료형으로 돌아가는 방법 -> 다운 캐스팅
		