1 제네릭이란?
   어떤 값이 하나의 참조 자료형이 아닌 여러 참조 자료형을 사용할 수 있도록 프로그래밍 하는 것
	
	모든 클래스는 Object 클래스 을 상속 받는다.
    -> 다형성
 
	<T>  --> <Plastic> -> T로 정의된 부분이 Plastic으로 변경
	
	-> 제네렉에서 자료형이 결정된는 순간 
		(인스턴스가 생성되는 시점에 결정)
		 -> 생성되기 전에는 자료형 변경되어 있을까? X
		 -> 생성되기 전에 접근 가능한 변수, 메서드 -> 적용 불가 
			(static 정의된 변수, 메서드)
		
		제네릭 자료형 -> Object 인식 -> 투입된 자료형 형변환
		
		
		Powder, Plastic -> 프린터에 사용되는 재료, 공통 기능(Material 추상클래스)
		
		<T extends 자료형 클래스> -> T는 Object로 결정 X -> Material로 결정된 후 시작한다.
		
		
2. ThreeDPrinter
		-> Plastic
		-> Powder


3. <T extends 자료형 클래스>
T는 처음부터 지정된 자료형 클래스 부터 시작 -> 대입된 자료형으로 형변환
(extends가 없으면)T -> Object -> 형변환


4. 제네릭 메서드 
 제네릭 -> 메서드에서 한정
 
 <  ... > -> 자료형이 투입되는 입구가 -> 메서드에 위치 
 -> static 메서드도 제네렉 형태로 활용 가능
 
 대입된 자료형이 결정되는 시점? 메서드가 호출되는 시점(스택에 올라가 있을때)
 
 Object material
 
 Powder p2 = (Powder)printer.getMaterial();
 
 Object 자료형 -> 다형성으로 접근이 가능 -> 원래 자료형으로 돌아가려면(형변환)
 
 자료형 매개변수 T와 static 
 
 public static<T,V> double makeRectangle(Point<T, V> p1, Point<T, V> p2) {
 
 }
 
 class Point<T, V> {
 
 }
 
 
 class Shape<T> {
	 public static<T,V> double makeRectangle(Point<T, V> p1, Point<T, V> p2) {
 
	}
 }