P281
1. 추상클래스
	추상적 <--> 구체적 (정해져 있는)
	(정해지지 않은)
	
	구현 코드가 없은 형태 메서드, 이 메서드를 포함하는 클래스
	(메서드 정의)
	인스턴스가 만들어 질려면 -> 메서드의 구현부분이 반드시 필요
	-> 인스턴스가 만들어 질 수 없다
	
	int add (int num1, int num2); // 구현 코드 X -> 메서드 정의
	-> 사용 불가 
	
	상속을 통해서 의미가 있는 클래스 -> 하위 클래스가 추상 메서드의 구현부분을 
	클래스에 맞게 구현
	
	메서드의 구현 규칙을 정해 준다
	Collection -> add 추상 메서드 -> 구현 부분 X, 정의 O
	ArrayList
		- add 
		(물리적 위치-> 순서대로 추가)
	LinkedList
		- add 
		(논리적 위치 -> 순서대로 추가)
	HashSet 
		- add 
		(집합 자료형 형태 -> 추가)
	
	abstract 예약어

	추상메서드 -> 상속 받은 하위 클래스가 반드시 구현
	
	추상메서드 -> 하위 클래스의 표준
	 
	 Animal > Mammal > Human 
	 일반적 < ------------>  구체적
	 
	
	
	추상 -> 공통적
	-> 추상클래스에서는 추상 메서드 외에 일반 메서드, 일반 변수 선언 가능 
	(하위 클래스가 공유 목적의 기능 추가 가능)
	
	
	abstract 예약어
	
	추상 클래스 -> 추상 메서드가 없이 abstract만 추가하는 경우
	-> 공통 기능의 모음 
	
	
2. 템플릿 메서드
	템플릿 -> 정리해진 틀 
	자동차 -> 일반 승용차, 자율 주행차 
	시동을 걸고
	운전을 하고 
	정지를 하고 
	시동을 끊다
	
	

3. final 예약어 -> 변경 불가
final 클래스명 -> 상속 불가
final 메서드명 -> 재정의 불가 
final 변수명 -> 상수

P287 추상 메서드가 없어도 abstract 클래스로 정의하는 경우
AbstractTV -> 구체적인 메서드 turnOn, turnOff
추상 메서드 X 
AbstractTV -> 완전한 TV X -> 인스턴스 생성 되면 X 

289 

Computer c2 = new DeskTop();

294 - 15 
final public void run() {
	startCar();
	drive();
	stop()
	turnOff();
}

PlayerLevel 
	-> BeginnerLevel
	-> AdvancedLevel
	-> SuperLevel 
	-> go(템플릿)-> 
	
	299 - 15
	public void upgradeLevel(PlayerLevel level) {
		this.level = level;
		level.showLevelMessage(); // -BeginnerLevel, AdvancedLevel, SuperLevel 
	}
	
	HashSet -> 집합 자료형 -> 순서 X, 중복 X
	
	09 
	final public void go(int count) {
		run()
		... 
		jump()
		turn();
	}
	
	303
	
	AdvancedLevel aLevel = new AdvancedLevel();
	player.upgradeLevel(aLevel);
							PlayerLevel 
							
	SuperLevel sLevel = new SuperLevel();
	player.upgradeLevel(sLevel);