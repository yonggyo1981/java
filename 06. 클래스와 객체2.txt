1. this
	- 자신의 메모리(힙)를 가리키는 this 
	- 생성된 인스턴스 스스로를 가리키는 예약어
	- 클래스 내부에서 생성된 인스턴스(자신 스스로)
	 
	 Person person1 = new Person();
	 Person person2 = new Person();
	
	생성자에서 다른 생성자를 호출하는 this 
	this가 함수로 호출 -> 클래스 내부의 생성자
	- this를 호출하는 생성자 이전에 다른 코드를 추가 X
	
	자신의 주소를 반환하는 this
	
2. 객체 간 협력
   상호작용 
	
	학생  -- 버스 
	        -- 지하철
	
	
	학생 - 학생이름, 차비
			- 차비가 차감 
	버스 - 수익 증가 
	      - 승객의 수 증가 
		  
3. static 
	정적 - 공유
	속성 -> 각 인스턴스가 공유(속성 1개를 여러 인스턴스가 공유)
	메서드 -> 각 인스턴스가 공유
	
	정적 <--- ---> 동적(인스턴스 -> 힙)
	(고정, 변하지 X)
	데이터 영역
	
	클래스명.속성명 
	
	static 변수, 메서드 -> 생성 X -> 원래부터 처음 로딩 시 부터 데이터 영역에 존재
	
	static 메서드 안에서는 인스턴 변수 접근 할 수 X, static 변수만 접근이 가능
						static 메서드만 호출이 가능
	
	
	
	정적                    <--->  동적
	(static - 데이터 영역)       (멤버변수 -인스턴스 - 힙영역)
	
	정적변수 -> 클래스 변수
	
	static 메서드 -> 인스턴스 변수, 인스턴스 메서드 접근 불가.
	
	static 변수 = 정적 변수 = 클래스변수
	
	멤버변수 = 인스턴변수, 속성, 특성 ...
	
	int, long -> 선언 -> 기본값 0
	double, float -> 선언 -> 기본값 0.0
	참조 변수 선언 -> 기본값 null
	
	접근 제어자
	public - 외부 클래스 접근 가능, import 통해서 다른 패키지에서도 접근
	default(package) - 같은 패키지 내에서만 접근 가능
	protected - default + 상속을 받으면 다른 패키지의 외부 클래스에서 내부에서만 접근이 가능(private)
	private - 내부 클래스에서만 접근이 가능 
	


변수의 유효범위
1. 지역변수 - 함수 내부에서 정의된 변수 
				- 함수가 호출될때 스택에서 생성되고 소멸 
				- 스택 메모리
2. 멤버변수
				- 인스턴스가 생성되어야 존재
				- 힙 메모리 영역 
				- 인스턴스 변수
				- 가비지 콜렉터(GC)가 사용되지 않는 경우 수거 
				
3. static 변수
			- 프로그램이 실행되는 데이터 영역 메모리에 상주
			- 상수, 문자열(상수 풀), static 변수가 생성
			- 클래스 생성과 상관없이 데이터 영역 메모리에 생성
			   (클래스명으로 접근 -> 클래스 변수)
	

	
192 1분 복습 
함수의 기능 구현을 위해서 잠시 사용한다면? 지역 변수 
클래스의 속성을 나타내고, 각 인스턴스 마다 다른 값을 가진다면? 멤버 변수
여러 인스턴스에서 공유해서 사용하도록 한 번만 생성되어여 한다면?
static 변수, 정적 변수, 클래스 변수


싱글톤 패턴 
- 인스턴스를 여러개 생성할 필요가 없는 경우
- 공유하여 같은 인스턴스를 사용하는 경우	
- 인스턴스를 static으로 정의

1. 생성자를 private으로 만든다 -> 외부 클래스에서 생성 불가, 다만 내부에서만 생성 가능

2. 클래스 내부에서 static으로 유일한 인스턴스를 생성한다
  + private
  
3. 외부에서 접근할 수 있는 public 메서드

P197 
1. 클래스 내부에서 자신의 주소를 가리키는 예약어를 "this"라고 합니다.
